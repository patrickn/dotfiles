# .zshrc is for interactive shell configuration. You set options for the
# interactive shell here with the setopt and unsetopt commands. You can also
# load shell modules, set your history options, change your prompt, set up zle
# and completion, etc. You also set any variables that are only used in the
# interactive shell (e.g. $LS_COLORS).
# https://unix.stackexchange.com/questions/71253/what-should-shouldnt-go-in-zshenv-zshrc-zlogin-zprofile-zlogout
# ~/.zshrc:
echo "Running ~/.zshrc..."

autoload -Uz compinit promptinit
compinit
promptinit

HISTFILE=~/.zsh_history
HISTSIZE=10000000
SAVEHIST=10000000
HISTORY_IGNORE="(?|??|???|exit|history*|rm*)"

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
# setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt HIST_IGNORE_SPACE         # Prepending space to command prevents it being saved in history
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.
setopt PROMPT_SUBST              # Various substitutions performed in prompts.

# cause up/down arrow keys to search history
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey "^[[H" beginning-of-line
bindkey "^[[F" end-of-line
bindkey '[A' up-line-or-beginning-search # Up
bindkey '[B' down-line-or-beginning-search # Down
bindkey "^[[3~" delete-char

# case-insensitive matching only if there are no case-sensitive matches
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'

source ~/.local/zsh/functions.zsh

# tilix
if [ $TILIX_ID ] || [ $VTE_VERSION ]; then
        source /etc/profile.d/vte.sh
fi

function zshaddhistory() {
	echo "${1%%$'\n'}|${PWD}   " >> ~/.zsh_history_ext
}

# exa
export EXA_COLORS="ur=2;32:uu=2;32:Makefile=35:ex=31:sn=32:ux=32:ue=32:*.md=34;04;4"

# zsh-z
source ~/local/plugins/zsh-z.plugin.zsh
zstyle ':completion:*' menu select

# set some configuration vars
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# Go lang and apps
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

source $HOME/.aliases

function is_toolbox()
{
    [ -f "/run/.toolboxenv" ]
}

function toolbox_name() {
    if is_toolbox
    then
        TOOLBOX_NAME=$(cat /run/.containerenv | grep -oP "(?<=name=\")[^\";]+")
        echo "$TOOLBOX_NAME"
    else 
        echo "Terminal"
    fi
}

function change_title_bar() {
    case $TERM in
        xterm*|gnome*)
            print -Pn "\033]0; `toolbox_name` \007"
    esac
}

function set_bg_colour()
{
    case $* in
    'blue')
        echo -e '\e]11;rgb:aa/bb/cc\a'
        ;;
    'red')
        echo -e '\e]11;rgb:00/00/00\a'
        ;;
    esac
}

precmd () {
    change_title_bar
    # any other precmd things you want to do
}

if is_toolbox
then
    # set_bg_colour 'blue'
    PROMPT="%(?.%F{green}â¬¢ .%F{red}â¬¢ )%F{green}[\`toolbox_name\`]%f%B%F{240}%f%b %~> "
else
    # set_bg_colour 'red'
    PROMPT="%(?..%F{red}!!)%f%B%F{240}%f%b %~> "
fi
